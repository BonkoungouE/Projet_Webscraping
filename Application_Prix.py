import streamlit as st
import requests
import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

from bs4 import BeautifulSoup
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression

# Importer pour la mise en forme
st.markdown("""
    <div style="text-align: center;">
        <h1 style="color: #4CAF50;">üìà Pr√©diction des Prix des Actions</h1>
        <p style="font-size: 18px;">D√©velopp√© par <b>BONKOUNGOU Emmanuel, MANTHO Livine Larissa
et MISSENGUE MOULOMBO Exauc√©e </b></p>
        <p style="font-size: 18px;">Sous la supervision de <b>M. Serge NDOUMIN </b></p>
    </div>
""", unsafe_allow_html=True)




st.sidebar.title("üîç Options")
st.sidebar.info("Bienvenue sur notre application de pr√©diction boursi√®re. \nS√©lectionnez vos param√®tres et analysez les tendances.")



# Fonction pour scraper les donn√©es de Yahoo Finance
def scrape_historique(ticker):
    end_date = datetime.now()
    start_date = end_date - timedelta(days=3 * 365)

    # Convertir les dates en timestamp Unix
    period1 = int(start_date.timestamp())
    period2 = int(end_date.timestamp())

    # Construire l'URL avec les param√®tres de date
    url = f"https://finance.yahoo.com/quote/{ticker}/history?period1={period1}&period2={period2}&interval=1d&filter=history&frequency=1d"

    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        tables = soup.find_all("table")

        if tables:
            df = pd.read_html(str(tables[0]))[0]
            df = df.dropna()

            # Convertir la colonne "Date" en datetime
            df["Date"] = pd.to_datetime(df["Date"])

            # üìå **CORRECTION : R√©ordonner les dates du plus ancien au plus r√©cent**
            df = df.sort_values(by="Date").reset_index(drop=True)

            # Connexion SQLite
            conn = sqlite3.connect("prix_historique.db")
            df.to_sql(ticker, conn, if_exists="replace", index=False)
            conn.close()

            return df
        else:
            st.error("Tableau introuvable sur Yahoo Finance.")
    else:
        st.error("√âchec du scraping des donn√©es.")
    return None

# Fonction pour pr√©parer les donn√©es
def prepare_data(df):
    df.rename(columns={df.columns[4]: "Close"}, inplace=True)
    df = df[["Date", "Close"]].dropna()

    # Filtrer les lignes contenant des valeurs non num√©riques dans la colonne "Close"
    df = df[pd.to_numeric(df["Close"], errors='coerce').notnull()]

    df["Close"] = df["Close"].astype(float)  # Convertir en float apr√®s nettoyage

    # Normalisation des donn√©es
    scaler = MinMaxScaler(feature_range=(0, 1))
    df["Close"] = scaler.fit_transform(df[["Close"]])

    return df, scaler

# Fonction pour cr√©er des s√©quences temporelles
def create_sequences(data, seq_length=50):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length])
        y.append(data[i + seq_length])
    return np.array(X), np.array(y)

# Interface utilisateur Streamlit
#st.title("üìà Pr√©diction des Prix des Actions")

ticker = st.text_input("Entrez le symbole boursier (ex: AAPL, TSLA)", "AAPL")
horizon = st.slider("Choisissez l'horizon de pr√©vision (jours)", 1, 180, 120)

if st.button("Lancer l'analyse", key="scraper_button"):
    with st.spinner("R√©cup√©ration des donn√©es..."):
        df = scrape_historique(ticker)
        
        if df is not None:
            df, scaler = prepare_data(df)
            st.success("‚úÖ Donn√©es r√©cup√©r√©es et trait√©es avec succ√®s !")

            # 1Ô∏è‚É£ Affichage des premi√®res lignes des donn√©es
            st.subheader("üìä Donn√©es apr√®s traitement")
            st.dataframe(df.head())
            st.markdown("---")  # Ajoute une ligne horizontale
            st.subheader("üìä Donn√©es apr√®s traitement")

            # 2Ô∏è‚É£ Visualisation des donn√©es historiques
            st.subheader("üìà Visualisation des donn√©es")
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(df["Date"], df["Close"], label="Prix de cl√¥ture normalis√©", color='b', linestyle='-')
            ax.set_xlabel("Date")
            ax.set_ylabel("Prix de cl√¥ture (normalis√©)")
            ax.set_title(f"√âvolution du prix de l'action {ticker}")
            ax.legend()
            ax.grid()
            plt.xticks(rotation=45)
            st.pyplot(fig)
            st.markdown("---")  # Ajoute une ligne horizontale
            st.subheader("üìä Donn√©es apr√®s traitement")

            # 3Ô∏è‚É£ Pr√©dictions
            st.subheader("üîÆ Pr√©dictions des prix")

            seq_length = 50
            data = df["Close"].values
            X, y = create_sequences(data, seq_length)
            split = int(len(X) * 0.8)
            X_train, X_test, y_train, y_test = X[:split], X[split:], y[:split], y[split:]

            # Adapter les dimensions pour la r√©gression lin√©aire
            X_train = X_train.reshape(X_train.shape[0], X_train.shape[1])
            X_test = X_test.reshape(X_test.shape[0], X_test.shape[1])

            # Entra√Ænement du mod√®le
            model = LinearRegression()
            model.fit(X_train, y_train)

            # Pr√©dictions futures
            future_predictions = []
            last_sequence = data[-seq_length:].reshape(1, -1)

            for _ in range(horizon):
                next_pred = model.predict(last_sequence)[0]
                future_predictions.append(next_pred)
                last_sequence = np.append(last_sequence[:, 1:], next_pred).reshape(1, -1)

            # Inverser la normalisation
            future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

            # üìå **Correction de l'ordre des dates pour l'affichage**
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(df["Date"], scaler.inverse_transform(df[["Close"]]), label="Donn√©es Historiques", color="blue")

            # G√©n√©rer les dates futures √† partir de la derni√®re date connue
            future_dates = pd.date_range(df["Date"].iloc[-1], periods=horizon + 1, freq='D')[1:]

            # Ajouter les pr√©visions futures au graphique
            ax.plot(future_dates, future_predictions, label="Pr√©visions Futures", color="red", linestyle="--")

            # Personnalisation du graphique
            ax.set_xlabel("Date")
            ax.set_ylabel("Prix de Cl√¥ture (USD)")
            ax.legend()
            ax.grid()
            plt.xticks(rotation=45)

            # Afficher le graphique dans Streamlit
            st.pyplot(fig)
            st.success("‚úÖ Pr√©dictions g√©n√©r√©es avec succ√®s !")
            
st.markdown("""
    <hr>
    <p style="text-align: center; font-size: 14px;">
        üöÄ Projet r√©alis√© dans le cadre du cours de Webscrapping | ¬© 2025 - Tous droits r√©serv√©s
    </p>
""", unsafe_allow_html=True)

